# -*- coding: utf-8 -*-
"""
Copyright (C) 2015 Stuart W.D Grieve 2015

Developer can be contacted by s.grieve _at_ ed.ac.uk

This program is free software;
you can redistribute it and/or modify it under the terms of the
GNU General Public License as published by the Free Software Foundation;
either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY;
without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the
GNU General Public License along with this program;
if not, write to:
Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor,
Boston, MA 02110-1301
USA

Method to plot a raw histogram of hillslope length data from the 
*_HilltopData.csv file generated by LH_Driver.cpp
 
Parameters that need modified are highlighed with comments

@author: SWDG
"""

def mm_to_inch(mm):
    return mm*0.0393700787

import matplotlib.pyplot as plt
import numpy as np
from matplotlib import rcParams
import MuddPyStatsTools as mpy
    
# Set up fonts for plots
rcParams['font.family'] = 'sans-serif'
rcParams['font.sans-serif'] = ['arial']
rcParams['font.size'] = 10
rcParams['xtick.direction'] = 'out'
rcParams['ytick.direction'] = 'out'

#================ modifyable parameters start here ====================

#paths to the data and to save the figure to
path = '..\\..\\Final_Data\\smooth\\' #path to the folder contaning the hilltopdata files
filename = 'CA_HilltopData.csv'
figpath = path #path to save the final figures

#plot style parameters
xmax = 900
ymax = 12250
xstep = 200
ystep = 3000
title_move = 0.

#plot labels
location = 'Sierra Nevada'

#================ modifyable parameters end here ====================

fig = plt.figure()

#load the hilltopdata file to get the LH data 
with open(path+filename,'r') as f:
    f.readline()
    data = f.readlines()

    LH = []
        
    for d in data:
        if 'fail' not in d:
            split = d.split(',')
            relief = float(split[4])
            lh = float(split[5])
            hilltop_slope = float(split[8])
            if (lh > 2.0):
                if (relief > 2.0):
                    if (hilltop_slope < 1.2):
                        LH.append(lh)

#get the median absolute devaition
MAD = mpy.calculate_MedianAbsoluteDeviation(LH)

#set up the 4 subplots
ax = plt.gca()

#plot the histogram and get the patches so we can colour
n,bins,patches = plt.hist(LH,bins=200,color='k',linewidth=0)

#Add a title with the location name
ax.text(.5+title_move,.9,location, horizontalalignment='center', transform=ax.transAxes,fontsize=12)

#get the median -/+ median devaition
MinMAD = np.median(LH)-MAD
MaxMAD = np.median(LH)+MAD

#color the bins that fall within +/- MAD of the median    
#http://stackoverflow.com/questions/6352740/matplotlib-label-each-bin
for patch, rightside, leftside in zip(patches, bins[1:], bins[:-1]):
    if rightside < MinMAD:        
        patch.set_alpha(0.4)
    elif leftside > MaxMAD:
        patch.set_alpha(0.4)

#Insert dashed red line at median
plt.vlines(np.median(LH),0,ymax,label='Median', color='r',linewidth=1,linestyle='dashed')

#set the x and y max based on the input params
plt.xlim(0,xmax)
plt.ylim(0,ymax)

#configure tick spacing based on the defined spacings given
plt.tick_params(axis='x', which='both', top='off',length=2)
plt.tick_params(axis='y', which='both', right='off',length=2)

#format the ticks to only appear on the bottom and left axes    
ax.xaxis.set_ticks(np.arange(0,xmax+1,xstep))
ax.yaxis.set_ticks(np.arange(0,ymax+1,ystep))

#annotate the plot with the median and MAD
plt.annotate('Median = '+str(int(round(np.median(LH),0)))+' m\nMAD = '+str(int(round(MAD,0)))+' m', xy=(0.55, 0.4), xycoords='axes fraction', fontsize=10, horizontalalignment='left', verticalalignment='top')

#spacing of the plots
plt.subplots_adjust(hspace = 0.25)

#x and y axis labels
fig.text(0.5, 0.02, 'Hillslope Length (m)', ha='center', va='center', size=12)
fig.text(0.06, 0.5, 'Count', ha='center', va='center', rotation='vertical', size=12)
             
#set the size of the plot to be saved. These are the JGR sizes:
#quarter page = 95*115
#half page = 190*115 (horizontal) 95*230 (vertical)
#full page = 190*230
fig.set_size_inches(mm_to_inch(190), mm_to_inch(115))
    
plt.savefig(figpath+'LH_Hist_Raw.png', dpi = 500) #change to *.tif for submission
